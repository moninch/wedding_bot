import asyncio
import json
import os
from typing import Dict, List, Optional
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=os.getenv('BOT_TOKEN'))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class QuestStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_task_answer = State()

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = "quest_data.json"

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
participants_data = {}

# –°—á–µ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ú–∏—Å—Å–∏—è –Ω–µ–≤—ã–ø–æ–ª–Ω–∏–º–∞"
mission_impossible_clicks = {}

# –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
PARTICIPANTS = [
    "üë∏ –ù–∞—Ç–∞–ª—å—è",
    "üåü –Æ–ª–∏—è –ò–≤–∞–Ω–æ–≤–∞", 
    "üí´ –ê–Ω–∞—Å—Ç–∞—Å–∏—è",
    "üå∏ –ê–Ω–Ω–∞",
    "‚ú® –Æ–ª–∏—è –ö—É–∑–Ω–µ—Ü–æ–≤–∞",
    "üå∫ –û–ª—å–≥–∞"
]

# –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–µ–∑ —ç–º–æ–¥–∑–∏ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ª–æ–≥–∏–∫–∏
PARTICIPANTS_CLEAN = [
    "–ù–∞—Ç–∞–ª—å—è",
    "–Æ–ª–∏—è –ò–≤–∞–Ω–æ–≤–∞", 
    "–ê–Ω–∞—Å—Ç–∞—Å–∏—è",
    "–ê–Ω–Ω–∞",
    "–Æ–ª–∏—è –ö—É–∑–Ω–µ—Ü–æ–≤–∞",
    "–û–ª—å–≥–∞"
]

# –ó–∞–¥–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
TASKS = {
    "–ù–∞—Ç–∞–ª—å—è": [
        "–ü–æ–¥–æ–π–¥–∏ –∫ –º–æ–µ–º—É —Å–≤–µ–∫—Ä—É –∏ —É–∑–Ω–∞–π –∫–∞–∫ –ø—Ä–æ—à–ª–∞ –µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Ä—ã–±–∞–ª–∫–∞. –£–∑–Ω–∞–π –º–µ—Å—Ç–æ –∏ —É–ª–æ–≤üòâ",
        "–ó–∞–∫–∞–∂–∏ —É –¥–∏–¥–∂–µ—è –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø–µ—Å–Ω—é –∏ —Å—Ç–∞–Ω—Ü—É–π –ª–∞–º–±–∞–¥—É —Å –ø–æ–¥—Ä—É–≥–∞–º–∏. –ù–µ –∑–∞–±—É–¥—å –∑–∞–ø–µ—á–∞—Ç–ª–µ—Ç—å —ç—Ç–æ –Ω–∞ –∫–∞–º–µ—Ä—É, –∞ –ø–æ—Ç–æ–º –∑–∞–≥—Ä—É–∑–∏ —Å—é–¥–∞!",
        "–û–±–µ—â–∞–π –±–æ–ª—å—à–µ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –≥–æ–≤–æ—Ä–∏—Ç—å, —á—Ç–æ –º–µ–Ω—è –∫—É–ø–∏–ª–∏ —É —Ü—ã–≥–∞–Ω–µ–π. –°–æ–≤–µ—Ç—É—é —Ö–æ—Ä–æ—à–æ –ø–æ–¥—É–º–∞—Ç—å –∏ –¥–∞—Ç—å —Å–≤–æ–π –æ—Ç–≤–µ—Ç.",
        "–¢–æ–≥–¥–∞ —Å–¥–µ–ª–∞–π —Ñ–æ—Ç–æ —Å –º–æ–µ–π –ª—é–±–∏–º–∫–æ–π‚ù§Ô∏è –Ø –¥—É–º–∞—é, —Ç—ã –∑–Ω–∞–µ—à—å –∫—Ç–æ —ç—Ç–æ?"
    ],
    "–Æ–ª–∏—è –ò–≤–∞–Ω–æ–≤–∞": [
        "–°–¥–µ–ª–∞–π —Ñ–æ—Ç–æ —Å —á–µ–ª–æ–≤–µ–∫–æ–º –ø–∞—É–∫–æ–º.",
        "–£–∑–Ω–∞–π —É –†–∞–∏—Å—ã –•—Ä—É–ª–µ–Ω–∫–æ –∫—Ç–æ –µ–µ –ª—é–±–∏–º—ã–π –≤–Ω—É–∫üòö",
        "–°–∫–∞–∂–∏ –ê–ª–∏–Ω–µ –•—Ä—É–ª–µ–Ω–∫–æ, —á—Ç–æ –î–∞–Ω–µ –æ—á–µ–Ω—å –Ω—Ä–∞–≤–∏—Ç—Å—è –ø–µ—Å–Ω—è ¬´–°—ã–Ω—É, –°—ã–Ω—É, –æ–Ω –∂–µ–Ω–∏—Ö.¬ª –ü—Ä–µ–¥–ª–ª–æ–∂–∏ –µ–π –∑–∞–∫–∞–∑–∞—Ç—å —ç—Ç—É –ø–µ—Å–Ω—é —É –¥–∏–¥–∂–µ—è. –ó–∞–ø–∏—à–∏ –Ω–∞ –≤–∏–¥–µ–æ –≤–∞—à —Ä–∞–∑–≥–æ–≤–æ—Äüòú"
    ],
    "–ê–Ω–∞—Å—Ç–∞—Å–∏—è": [
        "–ü–æ–ø—Ä–æ—Å–∏ –¥–∏–¥–∂–µ—è –≤–∫–ª—é—á–∏—Ç—å –ø–µ—Å–Ω—é ¬´–¶–∞—Ä–∏—Ü–∞¬ª. –ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –æ–Ω —Å–æ–≥–ª–∞—Å–∏—Ç—Å—è (–Ω–∞–¥–æ –±—É–¥–µ—Ç –ø–æ—É–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å), –æ–±—ä—è–≤–∏ –≤ –º–∏–∫—Ä–æ—Ñ–æ–Ω, —á—Ç–æ —Å–µ–π—á–∞—Å –±—É–¥–µ—Ç –∏–≥—Ä–∞—Ç—å —Ç–≤–æ—è —Å–∞–º–∞—è –ª—é–±–∏–º–∞—è –ø–µ—Å–Ω—è. –ù–µ –∑–∞–±—É–¥—å –∑–∞–ø–µ—á–∞—Ç–ª–µ—Ç—å –Ω–∞ –≤–∏–¥–µ–æ",
        "–ò–¥–∏ –∫ —Å–µ—Å—Ç—Ä–µ –Ω–µ–≤–µ—Å—Ç—ã –∏ –ø–æ–ø—Ä–æ—Å–∏ –ø–æ–º–æ—â–∏ –≤ —Ç–∞–∫–æ–º —Å–æ–≤–º–µ—Å—Ç–Ω–æ–º —Ñ–æ—Ç–æ. –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–∏–Ω—å –±–æ—Ç—É",
        "–ü—Ä–µ–¥–ª–æ–∂–∏ –≤–µ–¥—É—â–µ–º—É –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –∏ –ø–æ–ø—Ä–æ—Å–∏ –µ–≥–æ –Ω–æ–º–µ—Ä. –ù–∞–ø–∏—à–∏ –º–Ω–µ –µ–≥–æ –æ—Ç–≤–µ—Ç"
    ],
    "–ê–Ω–Ω–∞": [
        "–ê–Ω—è, —Ç—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∞ —Å–≤–æ–µ –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ. –ü–æ–∫–∞–∂–µ—à—å, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å?",
        "–°—Ä–µ–¥–∏ –≥–æ—Å—Ç–µ–π –µ—Å—Ç—å —Ç–∞–π–Ω—ã–π –∞–≥–µ–Ω—Ç. –ü–æ–¥–æ–π–¥–∏ –∫ –Ω–µ–º—É –∏ —Å–∫–∞–∂–∏ ¬´–ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω–∞—è –¥–ª—è –º–∏—Å—Å–∏–∏.¬ª –ï—Å–ª–∏ –æ–Ω –æ—Ç–≤–µ—Ç–∏—Ç —Ç–µ–±–µ ¬´–ù–æ –¥–æ–∂–¥—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ –≤–µ—á–µ—Ä¬ª. –ù–∞–ø–∏—à–∏ –µ–≥–æ –∏–º—è",
        "–°–¥–µ–ª–∞–π —Ñ–æ—Ç–æ —Å –ø–∞–ø–æ–π –∂–µ–Ω–∏—Ö–∞"
    ],
    "–Æ–ª–∏—è –ö—É–∑–Ω–µ—Ü–æ–≤–∞": [
        "–°–∫–∞–∂–∏ –º–æ–ª–æ–¥—ã–º —Ç–æ—Å—Ç, –≤ –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–∑–∞–º–µ—Ç–Ω–æ –≤–∫–ª—é—á–∏ –ª—é–±—É—é —Ñ—Ä–∞–∑—É –∏–∑ –Ω–∞—à–µ–≥–æ –¥–µ—Ç—Å—Ç–≤–∞. –ó–∞–ø–∏—à–∏ –Ω–∞ –≤–∏–¥–µ–æ –∏ —Å–∫–∏–Ω—å –º–Ω–µ",
        "–°–¥–µ–ª–∞–π —Ñ–æ—Ç–æ —Å –º–∞–º–æ–π –Ω–µ–≤–µ—Å—Ç—ã‚ù§Ô∏è",
        "–ú–Ω–µ –≤—Å–µ–≥–¥–∞ –±—ã–ª–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —É–∑–Ω–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ª—é–±–≤–∏ –ë–∞–±—É—à–∫–∏ –õ—é–¥—ã –∏ –¥–µ–¥—É—à–∫–∏ –°–ª–∞–≤—ã. –ú–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –¥–ª—è –º–µ–Ω—è?"
    ],
    "–û–ª—å–≥–∞": [
        "–£–∑–Ω–∞–π —É –∂–µ–Ω–∏—Ö–∞ –µ–≥–æ –ª—é–±–∏–º–æ–µ –±–ª—é–¥–æ, –∞ –ø–æ—Ç–æ–º —Å–ø—Ä–æ—Å–∏ —É –µ–≥–æ –±–∞–±—É—à–∫–∏ —Ä–µ—Ü–µ–ø—Ç",
        "–ü–æ–∂–º–∏ –ª—é–±–æ–º—É –º—É–∂—á–∏–Ω–µ —Ä—É–∫—É –∏ —Å–∫–∞–∂–∏ ¬´–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –ê–≥–µ–Ω—Ç!¬ª –µ—Å–ª–∏ –æ–Ω –æ—Ç–≤–µ—Ç–∏—Ç ¬´–ú–∏—Å—Å–∏—è –ø—Ä–∏–Ω—è—Ç–∞!¬ª - —Ç—ã –≤—ã–∏–≥—Ä–∞–ª–∞, –Ω–∞–ø–∏—à–∏ –µ–≥–æ –∏–º—è –º–Ω–µ.",
        "–°–¥–µ–ª–∞–π —Å–µ–ª—Ñ–∏ —Å –º–æ–ª–æ–¥–æ–∂–µ–Ω–∞–º–∏ –∏ –∑–∞–≥—Ä—É–∑–∏ –µ–≥–æ —Å—é–¥–∞"
    ]
}

# –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
CORRECT_ANSWERS = {
    "–ê–Ω–Ω–∞": {
        1: ["–ë–æ–Ω–¥–∞—Ä–µ–Ω–∫–æ –ê–Ω–¥—Ä–µ–π", "–ë–æ–Ω–¥–∏–∫", "–ê–Ω–¥—Ä–µ–π –î–º–∏—Ç—Ä–∏–µ–≤–∏—á"],
    },
    "–û–ª—å–≥–∞": {
        1: ["–ï–≤–≥–µ–Ω–∏–π –û–¥–∏–Ω–µ—Ü", "–ñ–µ–Ω—è –û–¥–∏–Ω–µ—Ü", "–ñ–µ–Ω—è", "–ï–≤–≥–µ—à–∞"],
    }
}

# –¢–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
TASK_CONTENT_TYPES = {
    "–ù–∞—Ç–∞–ª—å—è": ["text", "media", "text", "photo"],
    "–Æ–ª–∏—è –ò–≤–∞–Ω–æ–≤–∞": ["photo", "text", "video"],
    "–ê–Ω–∞—Å—Ç–∞—Å–∏—è": ["video", "photo", "text"],
    "–ê–Ω–Ω–∞": ["photo", "text", "photo"],
    "–Æ–ª–∏—è –ö—É–∑–Ω–µ—Ü–æ–≤–∞": ["video", "photo", "text"],
    "–û–ª—å–≥–∞": ["text", "text", "photo"]
}

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
if not os.path.exists('static'):
    os.makedirs('static')

def load_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    global participants_data, mission_impossible_clicks
    try:
        if os.path.exists(DATA_FILE):
            with open(DATA_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                participants_data = data.get('participants', {})
                mission_impossible_clicks = data.get('clicks', {})
                print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(participants_data)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        else:
            print("üìÅ –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π")
            participants_data = {}
            mission_impossible_clicks = {}
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        participants_data = {}
        mission_impossible_clicks = {}

def save_data():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª"""
    try:
        data = {
            'participants': participants_data,
            'clicks': mission_impossible_clicks
        }
        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        print(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {len(participants_data)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
load_data()

def create_name_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏–º–µ–Ω–∞–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä—è–¥–æ–≤"""
    builder = InlineKeyboardBuilder()
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Ä—è–¥—ã –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    for i in range(0, len(PARTICIPANTS), 2):
        row = [PARTICIPANTS[i]]
        if i + 1 < len(PARTICIPANTS):
            row.append(PARTICIPANTS[i + 1])
        
        for j, name in enumerate(row):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–∏—Å—Ç–æ–µ –∏–º—è –¥–ª—è callback_data, –Ω–æ –∫—Ä–∞—Å–∏–≤–æ–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            clean_name = PARTICIPANTS_CLEAN[i + j]
            builder.add(InlineKeyboardButton(text=name, callback_data=f"name_{clean_name}"))
        builder.adjust(2)  # 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É
    
    return builder.as_markup()

def create_task_keyboard(task_index: int, participant: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–¥–∞–Ω–∏—è"""
    builder = InlineKeyboardBuilder()
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
    if participant == "–ù–∞—Ç–∞–ª—å—è" and task_index == 2:
        builder.add(InlineKeyboardButton(text="–ú–∏—Å—Å–∏—è –Ω–µ–≤—ã–ø–æ–ª–Ω–∏–º–∞", callback_data="mission_impossible"))
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏
    if participant == "–ù–∞—Ç–∞–ª—å—è" and task_index == 3:
        builder.add(InlineKeyboardButton(text="–ü–æ–¥—Å–∫–∞–∑–∫–∞üí°", callback_data="hint_natalia"))
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∑–∞–¥–∞–Ω–∏—é
    if participant == "–Æ–ª–∏—è –ò–≤–∞–Ω–æ–≤–∞" and task_index == 0:
        builder.add(InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–¥–∞–Ω–∏—é", callback_data="return_task"))
    
    return builder.as_markup()

def get_encouragement_message() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –ø–æ–æ—â—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    messages = [
        "üéâ –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
        "üåü –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! –¢—ã —Å–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è –Ω–∞ —É—Ä–∞!",
        "üí´ –ú–æ–ª–æ–¥–µ—Ü! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!",
        "üå∏ –ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –¢—ã –Ω–∞—Å—Ç–æ—è—â–∞—è –∑–≤–µ–∑–¥–∞!",
        "‚ú® –ë—Ä–∞–≤–æ! –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –∂–¥–µ—Ç —Ç–µ–±—è!",
        "üå∫ –ü–æ—Ç—Ä—è—Å–∞—é—â–µ! –¢—ã –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–∞—è!",
        "üéä –§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π —É–¥–∏–≤–ª—è—Ç—å!",
        "üèÜ –í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ! –¢—ã –Ω–∞ –≤—ã—Å–æ—Ç–µ!",
        "üíé –ò–∑—É–º–∏—Ç–µ–ª—å–Ω–æ! –¢—ã –ª—É—á—à–∞—è!",
        "üöÄ –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! –õ–µ—Ç–∏–º –¥–∞–ª—å—à–µ!"
    ]
    import random
    return random.choice(messages)

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø—Ä–∞–≤–∫–∏"""
    help_text = """ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å –∫–≤–µ—Å—Ç
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üëë –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:
/answers - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
/status - –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
/reset - –°–±—Ä–æ—Å –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
/clear_state - –°–±—Ä–æ—Å —Ç–≤–æ–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–µ—Å–ª–∏ –∑–∞—Å—Ç—Ä—è–ª –≤ –∫–≤–µ—Å—Ç–µ)
/test_data - –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
/save - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
/next_task - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–¥–∞–Ω–∏—é
/reset_clicks - –°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–∫–∏ "–ú–∏—Å—Å–∏—è –Ω–µ–≤—ã–ø–æ–ª–Ω–∏–º–∞"

üí° –ï—Å–ª–∏ –∑–∞—Å—Ç—Ä—è–ª –≤ –∫–≤–µ—Å—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–π /clear_state –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è!
üîç –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ /answers –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–π /test_data –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏!
üöÄ –ï—Å–ª–∏ –∑–∞–≤–∏—Å –Ω–∞ –∑–∞–¥–∞–Ω–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–π /next_task –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞!
üîÑ –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ "–ú–∏—Å—Å–∏—è –Ω–µ–≤—ã–ø–æ–ª–Ω–∏–º–∞" –≥–ª—é—á–∏—Ç, –∏—Å–ø–æ–ª—å–∑—É–π /reset_clicks!"""
    
    await message.answer(help_text)

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = """üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°–≤–∞–¥–µ–±–Ω—ã–π –ë–æ—Ç! üéâ

–¢–µ–±–µ –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –ø—Ä–æ–π—Ç–∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∫–≤–µ—Å—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑ –≤ –∫–æ–Ω—Ü–µ!

–í—ã–±–µ—Ä–∏ —Å–≤–æ–µ –∏–º—è –∏–∑ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:"""
    
    await message.answer(welcome_text, reply_markup=create_name_keyboard())

@dp.callback_query(lambda c: c.data.startswith('name_'))
async def process_name_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∏–º–µ–Ω–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    participant_name = callback.data.replace('name_', '')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∏–º—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(participant=participant_name)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if participant_name not in participants_data:
        participants_data[participant_name] = {
            'current_task': 0,
            'completed_tasks': [],
            'answers': {}
        }
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        save_data()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
    await show_task(callback.message, participant_name, 0)
    await callback.answer()

async def show_task(message: types.Message, participant: str, task_index: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–¥–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫—É"""
    if task_index >= len(TASKS[participant]):
        # –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
        await message.answer("üéâ –¢—ã –æ—á–µ–Ω—å –∫–ª–∞—Å—Å–Ω–æ –ø–æ—Å—Ç–∞—Ä–∞–ª–∞—Å—å! –ü–æ–¥–æ–∂–¥–∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¥–µ–≤–æ—á–µ–∫ –∏–ª–∏ –ø–æ–º–æ–≥–∏ –∏–º –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏–π. –ê –ø–æ—Ç–æ–º –≤—Å–µ –≤–º–µ—Å—Ç–µ —É–∑–Ω–∞–π—Ç–µ —É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞ –í–∏–æ–ª–µ—Ç—Ç—ã –∫—É–¥–∞ –∂–µ –æ–Ω–∞ –¥–µ–ª–∞ –ø–æ–¥–∞—Ä–∫–∏???")
        return
    
    task_text = TASKS[participant][task_index]
    keyboard = create_task_keyboard(task_index, participant)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
    await message.answer(f"üìã –ó–∞–¥–∞–Ω–∏–µ {task_index + 1}:\n\n{task_text}", reply_markup=keyboard)
    
    # –ï—Å–ª–∏ —ç—Ç–æ –ê–Ω–∞—Å—Ç–∞—Å–∏—è –∏ –≤—Ç–æ—Ä–æ–µ –∑–∞–¥–∞–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä —Ñ–æ—Ç–æ
    if participant == "–ê–Ω–∞—Å—Ç–∞—Å–∏—è" and task_index == 1:
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä —Ñ–æ—Ç–æ
            photo_path = "photo_2025-08-11_11-45-40.jpg"
            if os.path.exists(photo_path):
                await message.answer_photo(
                    types.FSInputFile(photo_path),
                    caption="üì∏ –í–æ—Ç –ø—Ä–∏–º–µ—Ä —Ç–∞–∫–æ–≥–æ —Ñ–æ—Ç–æ!"
                )
            else:
                await message.answer("üì∏ –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ç–æ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –ø–æ–∑–∂–µ")
        except Exception as e:
            await message.answer("üì∏ –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ç–æ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –ø–æ–∑–∂–µ")
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")

@dp.callback_query(lambda c: c.data == "mission_impossible")
async def mission_impossible_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–∏—Å—Å–∏—è –Ω–µ–≤—ã–ø–æ–ª–Ω–∏–º–∞'"""
    data = await state.get_data()
    participant = data.get('participant')
    
    if participant and participant in participants_data:
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π
        if participant not in mission_impossible_clicks:
            mission_impossible_clicks[participant] = 0
        
        mission_impossible_clicks[participant] += 1
        save_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—á–µ—Ç—á–∏–∫
        
        # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ 2+ —Ä–∞–∑–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
        if mission_impossible_clicks[participant] >= 2:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
            current_task = participants_data[participant]['current_task']
            participants_data[participant]['completed_tasks'].append(current_task)
            participants_data[participant]['answers'][current_task] = "–ó–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ (–∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞ 2+ —Ä–∞–∑–∞)"
            participants_data[participant]['current_task'] += 1
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
            mission_impossible_clicks[participant] = 0
            save_data()
            
            await callback.message.answer("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ó–∞–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É.")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ
            if participants_data[participant]['current_task'] >= len(TASKS[participant]):
                await callback.message.answer("üéâ –¢—ã –æ—á–µ–Ω—å –∫–ª–∞—Å—Å–Ω–æ –ø–æ—Å—Ç–∞—Ä–∞–ª–∞—Å—å! –ü–æ–¥–æ–∂–¥–∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¥–µ–≤–æ—á–µ–∫ –∏–ª–∏ –ø–æ–º–æ–≥–∏ –∏–º –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏–π. –ê –ø–æ—Ç–æ–º –≤—Å–µ –≤–º–µ—Å—Ç–µ —É–∑–Ω–∞–π—Ç–µ —É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞ –í–∏–æ–ª–µ—Ç—Ç—ã –∫—É–¥–∞ –∂–µ –æ–Ω–∞ –¥–µ–ª–∞ –ø–æ–¥–∞—Ä–∫–∏???")
            else:
                encouragement = get_encouragement_message()
                await callback.message.answer(f"{encouragement}\n\nüìã –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Ç–µ–±—è:")
                await show_task(callback.message, participant, participants_data[participant]['current_task'])
            return
        
        # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ 1 —Ä–∞–∑, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(f"ü§î –î–∞ –ª–∞–¥–Ω–æ —Ç–µ–±–µ, –ù–∞—Ç–∞–ª—å—è! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!")
        return
    
    await callback.answer()

@dp.callback_query(lambda c: c.data == "hint_natalia")
async def hint_natalia_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –ù–∞—Ç–∞–ª—å–∏"""
    await callback.message.answer("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —è –ª–∞—Å–∫–æ–≤–æ –Ω–∞–∑—ã–≤–∞—é —Ç–µ–±—è –µ–µ –∏–º–µ–Ω–µ–ºüòö")
    await callback.answer()

@dp.callback_query(lambda c: c.data == "return_task")
async def return_task_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∑–∞–¥–∞–Ω–∏—é"""
    data = await state.get_data()
    participant = data.get('participant')
    
    if participant:
        await show_task(callback.message, participant, 0)
    
    await callback.answer()

def check_content_type(participant: str, task_index: int, content_type: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è"""
    if participant in TASK_CONTENT_TYPES and task_index < len(TASK_CONTENT_TYPES[participant]):
        expected_type = TASK_CONTENT_TYPES[participant][task_index]
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {participant}, –∑–∞–¥–∞–Ω–∏–µ {task_index + 1}")
        print(f"   –û–∂–∏–¥–∞–µ—Ç—Å—è: {expected_type}, –ø–æ–ª—É—á–µ–Ω–æ: {content_type}")
        
        if expected_type == "photo" and content_type == "photo":
            result = True
        elif expected_type == "video" and content_type == "video":
            result = True
        elif expected_type == "media" and content_type in ["photo", "video"]:
            result = True
        elif expected_type == "text" and content_type == "text":
            result = True
        else:
            result = False
        
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: {result}")
        return result
    
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {participant}, –∑–∞–¥–∞–Ω–∏–µ {task_index + 1} - —Ç–∏–ø –Ω–µ —É–∫–∞–∑–∞–Ω, –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π")
    return True  # –ï—Å–ª–∏ —Ç–∏–ø –Ω–µ —É–∫–∞–∑–∞–Ω, –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π

@dp.message(F.photo)
async def handle_photo(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    data = await state.get_data()
    participant = data.get('participant')
    
    if not participant:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å–≤–æ–µ –∏–º—è!")
        return
    
    current_task = participants_data[participant]['current_task']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ —Ñ–æ—Ç–æ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    if not check_content_type(participant, current_task, "photo"):
        await message.answer("‚ùå –î–ª—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω—É–∂–µ–Ω –¥—Ä—É–≥–æ–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞!")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
    photo_info = await bot.get_file(message.photo[-1].file_id)
    photo_path = f"static/{participant}_photo_{current_task}.jpg"
    
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
    await bot.download_file(photo_info.file_path, photo_path)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    participants_data[participant]['answers'][current_task] = photo_path
    participants_data[participant]['completed_tasks'].append(current_task)
    participants_data[participant]['current_task'] += 1
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    save_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ
    if participants_data[participant]['current_task'] >= len(TASKS[participant]):
        # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "—Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ"
        await message.answer("üéâ –¢—ã –æ—á–µ–Ω—å –∫–ª–∞—Å—Å–Ω–æ –ø–æ—Å—Ç–∞—Ä–∞–ª–∞—Å—å! –ü–æ–¥–æ–∂–¥–∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¥–µ–≤–æ—á–µ–∫ –∏–ª–∏ –ø–æ–º–æ–≥–∏ –∏–º –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏–π. –ê –ø–æ—Ç–æ–º –≤—Å–µ –≤–º–µ—Å—Ç–µ —É–∑–Ω–∞–π—Ç–µ —É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞ –í–∏–æ–ª–µ—Ç—Ç—ã –∫—É–¥–∞ –∂–µ –æ–Ω–∞ –¥–µ–ª–∞ –ø–æ–¥–∞—Ä–∫–∏???")
    else:
        encouragement = get_encouragement_message()
        await message.answer(f"{encouragement}\n\nüìã –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Ç–µ–±—è:")
        await show_task(message, participant, participants_data[participant]['current_task'])

@dp.message(F.video)
async def handle_video(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ"""
    data = await state.get_data()
    participant = data.get('participant')
    
    if not participant:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å–≤–æ–µ –∏–º—è!")
        return
    
    current_task = participants_data[participant]['current_task']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –≤–∏–¥–µ–æ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    if not check_content_type(participant, current_task, "video"):
        await message.answer("‚ùå –î–ª—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω—É–∂–µ–Ω –¥—Ä—É–≥–æ–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞!")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ
    video_info = await bot.get_file(message.video.file_id)
    video_path = f"static/{participant}_video_{current_task}.mp4"
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
    await bot.download_file(video_info.file_path, video_path)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    participants_data[participant]['answers'][current_task] = video_path
    participants_data[participant]['completed_tasks'].append(current_task)
    participants_data[participant]['current_task'] += 1
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    save_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ
    if participants_data[participant]['current_task'] >= len(TASKS[participant]):
        # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "—Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ"
        await message.answer("üéâ –¢—ã –æ—á–µ–Ω—å –∫–ª–∞—Å—Å–Ω–æ –ø–æ—Å—Ç–∞—Ä–∞–ª–∞—Å—å! –ü–æ–¥–æ–∂–¥–∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¥–µ–≤–æ—á–µ–∫ –∏–ª–∏ –ø–æ–º–æ–≥–∏ –∏–º –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏–π. –ê –ø–æ—Ç–æ–º –≤—Å–µ –≤–º–µ—Å—Ç–µ —É–∑–Ω–∞–π—Ç–µ —É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞ –í–∏–æ–ª–µ—Ç—Ç—ã –∫—É–¥–∞ –∂–µ –æ–Ω–∞ –¥–µ–ª–∞ –ø–æ–¥–∞—Ä–∫–∏???")
    else:
        encouragement = get_encouragement_message()
        await message.answer(f"{encouragement}\n\nüìã –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Ç–µ–±—è:")
        await show_task(message, participant, participants_data[participant]['current_task'])

@dp.message(F.text)
async def handle_text(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π
    if message.text.startswith('/'):
        return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã, –ø—É—Å—Ç—å –∏—Ö –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –¥—Ä—É–≥–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
    
    data = await state.get_data()
    participant = data.get('participant')
    
    if not participant:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å–≤–æ–µ –∏–º—è!")
        return
    
    current_task = participants_data[participant]['current_task']
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞: {participant}, –∑–∞–¥–∞–Ω–∏–µ {current_task + 1}")
    print(f"   –¢–µ–∫—Å—Ç: '{message.text}'")
    print(f"   –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è: {TASK_CONTENT_TYPES.get(participant, ['–Ω–µ —É–∫–∞–∑–∞–Ω'])[current_task] if participant in TASK_CONTENT_TYPES and current_task < len(TASK_CONTENT_TYPES[participant]) else '–Ω–µ —É–∫–∞–∑–∞–Ω'}")
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ù–∞—Ç–∞–ª—å–∏ –≤ –∑–∞–¥–∞–Ω–∏–∏ "–ú–∏—Å—Å–∏—è –Ω–µ–≤—ã–ø–æ–ª–Ω–∏–º–∞"
    if participant == "–ù–∞—Ç–∞–ª—å—è" and current_task == 2:
        # –õ—é–±–æ–π —Ç–µ–∫—Å—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ
        participants_data[participant]['completed_tasks'].append(current_task)
        participants_data[participant]['answers'][current_task] = message.text
        participants_data[participant]['current_task'] += 1
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π
        if participant in mission_impossible_clicks:
            mission_impossible_clicks[participant] = 0
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        save_data()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ
        if participants_data[participant]['current_task'] >= len(TASKS[participant]):
            await message.answer("üéâ –¢—ã –æ—á–µ–Ω—å –∫–ª–∞—Å—Å–Ω–æ –ø–æ—Å—Ç–∞—Ä–∞–ª–∞—Å—å! –ü–æ–¥–æ–∂–¥–∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¥–µ–≤–æ—á–µ–∫ –∏–ª–∏ –ø–æ–º–æ–≥–∏ –∏–º –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏–π. –ê –ø–æ—Ç–æ–º –≤—Å–µ –≤–º–µ—Å—Ç–µ —É–∑–Ω–∞–π—Ç–µ —É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞ –í–∏–æ–ª–µ—Ç—Ç—ã –∫—É–¥–∞ –∂–µ –æ–Ω–∞ –¥–µ–ª–∞ –ø–æ–¥–∞—Ä–∫–∏???")
        else:
            encouragement = get_encouragement_message()
            await message.answer(f"{encouragement}\n\nüìã –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Ç–µ–±—è:")
            await show_task(message, participant, participants_data[participant]['current_task'])
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    if not check_content_type(participant, current_task, "text"):
        await message.answer("‚ùå –î–ª—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω—É–∂–µ–Ω –¥—Ä—É–≥–æ–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ)!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
    if participant in CORRECT_ANSWERS and current_task in CORRECT_ANSWERS[participant]:
        correct_answer = CORRECT_ANSWERS[participant][current_task]
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª—å)
        debug_msg = f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è {participant}, –∑–∞–¥–∞–Ω–∏–µ {current_task + 1}:\n"
        debug_msg += f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: '{message.text}'\n"
        debug_msg += f"–û–∂–∏–¥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç: '{correct_answer}'\n"
        
        if isinstance(correct_answer, list):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
            user_text_lower = message.text.lower().strip()
            is_correct = any(answer.lower().strip() in user_text_lower for answer in correct_answer)
            debug_msg += f"–¢–∏–ø: —Å–ø–∏—Å–æ–∫, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {is_correct}"
        else:
            # –ï—Å–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç "–ª—é–±–æ–π –æ—Ç–≤–µ—Ç", —Ç–æ –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π —Ç–µ–∫—Å—Ç
            if correct_answer == "–ª—é–±–æ–π –æ—Ç–≤–µ—Ç":
                is_correct = True
                debug_msg += f"–¢–∏–ø: –ª—é–±–æ–π –æ—Ç–≤–µ—Ç, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {is_correct}"
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
                user_text_lower = message.text.lower().strip()
                correct_answer_lower = correct_answer.lower().strip()
                is_correct = correct_answer_lower in user_text_lower
                debug_msg += f"–¢–∏–ø: —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {is_correct}"
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª—å
        print(debug_msg)
        
        if is_correct:
            await message.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!")
        else:
            await message.answer("‚ùå –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!")
            return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    participants_data[participant]['answers'][current_task] = message.text
    participants_data[participant]['completed_tasks'].append(current_task)
    participants_data[participant]['current_task'] += 1
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    save_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ
    if participants_data[participant]['current_task'] >= len(TASKS[participant]):
        # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "—Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ"
        await message.answer("üéâ –¢—ã –æ—á–µ–Ω—å –∫–ª–∞—Å—Å–Ω–æ –ø–æ—Å—Ç–∞—Ä–∞–ª–∞—Å—å! –ü–æ–¥–æ–∂–¥–∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¥–µ–≤–æ—á–µ–∫ –∏–ª–∏ –ø–æ–º–æ–≥–∏ –∏–º –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏–π. –ê –ø–æ—Ç–æ–º –≤—Å–µ –≤–º–µ—Å—Ç–µ —É–∑–Ω–∞–π—Ç–µ —É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞ –í–∏–æ–ª–µ—Ç—Ç—ã –∫—É–¥–∞ –∂–µ –æ–Ω–∞ –¥–µ–ª–∞ –ø–æ–¥–∞—Ä–∫–∏???")
    else:
        encouragement = get_encouragement_message()
        await message.answer(f"{encouragement}\n\nüìã –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Ç–µ–±—è:")
        await show_task(message, participant, participants_data[participant]['current_task'])

@dp.message(Command("answers"))
async def cmd_answers(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"""
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    debug_info = f"üîç –û—Ç–ª–∞–¥–∫–∞:\n"
    debug_info += f"participants_data: {participants_data}\n"
    debug_info += f"–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(participants_data)}\n"
    debug_info += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π: {len(participants_data) if participants_data else 0}\n"
    debug_info += f"–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö: {DATA_FILE}\n"
    debug_info += f"–§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(DATA_FILE)}\n"
    
    if not participants_data:
        await message.answer(f"{debug_info}\n\n‚ùå –ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        return
    
    response = "üìä –û—Ç–≤–µ—Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n\n"
    
    for participant, data in participants_data.items():
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫ –∏–º–µ–Ω–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã
        emoji_map = {
            "–ù–∞—Ç–∞–ª—å—è": "üë∏",
            "–Æ–ª–∏—è –ò–≤–∞–Ω–æ–≤–∞": "üåü", 
            "–ê–Ω–∞—Å—Ç–∞—Å–∏—è": "üí´",
            "–ê–Ω–Ω–∞": "üå∏",
            "–Æ–ª–∏—è –ö—É–∑–Ω–µ—Ü–æ–≤–∞": "‚ú®",
            "–û–ª—å–≥–∞": "üå∫"
        }
        emoji = emoji_map.get(participant, "üë§")
        
        response += f"{emoji} {participant}:\n"
        response += f"   –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {len(data['completed_tasks'])}/{len(TASKS[participant])}\n"
        
        for task_num, answer in data['answers'].items():
            if isinstance(answer, str) and (answer.endswith('.jpg') or answer.endswith('.mp4')):
                response += f"   üì∑ –ó–∞–¥–∞–Ω–∏–µ {task_num + 1}: –§–∞–π–ª {answer}\n"
            else:
                response += f"   üí¨ –ó–∞–¥–∞–Ω–∏–µ {task_num + 1}: {answer}\n"
        
        response += "\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–æ–Ω–µ—Ü
    response += f"\n{debug_info}"
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    if len(response) > 4096:
        parts = [response[i:i+4096] for i in range(0, len(response), 4096)]
        for part in parts:
            await message.answer(part)
    else:
        await message.answer(response)

@dp.message(Command("reset"))
async def cmd_reset(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"""
    global participants_data, mission_impossible_clicks
    participants_data = {}
    mission_impossible_clicks = {}
    save_data()
    await message.answer("–î–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–±—Ä–æ—à–µ–Ω—ã.")

@dp.message(Command("next_task"))
async def cmd_next_task(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–¥–∞–Ω–∏—é"""
    data = await state.get_data()
    participant = data.get('participant')
    
    if not participant:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å–≤–æ–µ –∏–º—è!")
        return
    
    if participant not in participants_data:
        await message.answer("‚ùå –î–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return
    
    current_task = participants_data[participant]['current_task']
    
    if current_task >= len(TASKS[participant]):
        await message.answer("ÔøΩÔøΩ –í—Å–µ –∑–∞–¥–∞–Ω–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
        return
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–¥–∞–Ω–∏—é
    participants_data[participant]['current_task'] += 1
    save_data()
    
    await message.answer(f"‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–¥–∞–Ω–∏—é {participants_data[participant]['current_task'] + 1}")
    await show_task(message, participant, participants_data[participant]['current_task'])

@dp.message(Command("reset_clicks"))
async def cmd_reset_clicks(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–∫–∏ '–ú–∏—Å—Å–∏—è –Ω–µ–≤—ã–ø–æ–ª–Ω–∏–º–∞'"""
    data = await state.get_data()
    participant = data.get('participant')
    
    if not participant:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å–≤–æ–µ –∏–º—è!")
        return
    
    if participant in mission_impossible_clicks:
        mission_impossible_clicks[participant] = 0
        save_data()
        await message.answer(f"‚úÖ –°—á–µ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –¥–ª—è {participant} —Å–±—Ä–æ—à–µ–Ω!")
    else:
        await message.answer(f"‚ÑπÔ∏è –£ {participant} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞ –Ω–∞–∂–∞—Ç–∏–π")

@dp.message(Command("save"))
async def cmd_save(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    save_data()
    await message.answer("üíæ –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

@dp.message(Command("test_data"))
async def cmd_test_data(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    global participants_data
    
    if "–ù–∞—Ç–∞–ª—å—è" not in participants_data:
        participants_data["–ù–∞—Ç–∞–ª—å—è"] = {
            'current_task': 1,
            'completed_tasks': [0],
            'answers': {0: "–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –ù–∞—Ç–∞–ª—å–∏"}
        }
        save_data()
        await message.answer("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ù–∞—Ç–∞–ª—å–∏ —Å–æ–∑–¥–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    else:
        await message.answer("‚ÑπÔ∏è –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer(f"üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:\n{participants_data}")

@dp.message(Command("clear_state"))
async def cmd_clear_state(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    state = dp.fsm.get_context(bot=bot, user_id=message.from_user.id, chat_id=message.chat.id)
    await state.clear()
    await message.answer("‚úÖ –¢–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /start –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

@dp.message(Command("status"))
async def cmd_status(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    if not participants_data:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        return
    
    response = "üìà –°—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n\n"
    
    for participant, data in participants_data.items():
        completed = len(data['completed_tasks'])
        total = len(TASKS[participant])
        response += f"üë§ {participant}: {completed}/{total} –∑–∞–¥–∞–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\n"
    
    await message.answer(response)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    print(f"üìÅ –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö: {DATA_FILE}")
    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants_data)}")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
